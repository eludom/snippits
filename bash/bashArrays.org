* What
  Functions to perform array operations in bash
* Why
  - I find the native syntax obtuse
  - I like readable, understandable code
  - I'm pretty sure bash is not going again
  - Arrays are useful (well, pretty fundemental) to most code.
  - Learn more bash

* Why not

  From http://robertmuth.blogspot.com/2012/08/better-bash-scripting-in-15-minutes.html

  #+begin_quote
  Signs you should not be using a bash script:
  - your script is longer than a few hundred lines of code
  - you need data structures beyond simple arrays
  - you have a hard time working around quoting issues
  - you do a lot of string manipulation
  - you do not have much need for invoking other programs or pipe-lining them
  - you worry about performance
  #+end_quote

  To which I might add, "You find yourself writing a group of array
  functions to make bash arrays work more like python arrays
  
* Who
  - George Jones <gmj@pobox.com> 
  - Snippits and borrowing from all over, cited.

* When
  <2015-07-30 Thu>

* Where  

* How

  - Define obviously named functions to do array operations.

    Some possibly useful references:
    - See http://rosettacode.org/wiki/Arrays#UNIX_Shell
    - Maybe see http://mywiki.wooledge.org/BashFAQ/006
    - http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_10_02.html

** Test Function
  #+name: testFunction
  #+begin_src sh  :results output :exports both
  exec 2>&1;set -e; set -u; set +x; echo '#' `date;`

  source bashArrays.sh

  unset foo

  pass=0
  fail=0
  aFoo=(foo bar baz)
  arrayTest "some test" aFoo ${aFoo[@]}  && ((pass+=1)) || ((fail+=1))
  arrayTest "some test" aFoo ${aFoo[@]} foo && ((pass+=1)) || ((fail+=1))

  echo 
  echo "Passing tests:" $pass
  echo "Failing tests:" $fail

 #  testArray(foo,"bar")
 
  #+end_src

  #+RESULTS[f9a38d94751d3fa4061362b3607f4b20df8897d0]: testFunction
  : # Sat Aug 1 07:35:29 EDT 2015
  : pass: some test
  : fail: some test
  : 
  : Passing tests: 1
  : Failing tests: 1


** Create an array
  #+name: arrayCreate
  #+begin_src sh  :results output :exports both
  exec 2>&1;set -e; set -u; set +x; echo '#' `date;`

  source bashArrays.sh

  unset foo
  
  pass=0
  fail=0

  errMsg=$(arrayCreate 2>&1) || true
  arrayTest "Test missing array name" errMsg "createArray: Missing array name."  && ((pass+=1)) || ((fail+=1))

  arrayCreate foo || true
  arrayTest "Create array with no values" foo ""  && ((pass+=1)) || ((fail+=1))

  arrayCreate foo  bar || true
  arrayTest "Create array with one value" foo bar  && ((pass+=1)) || ((fail+=1))
 
  arrayCreate foo  bar baz|| true
  arrayTest "Create array with two values" foo bar baz && ((pass+=1)) || ((fail+=1))

  #+end_src

  #+RESULTS[9ef573b8eac102deebccfc2800dff5a7d0214706]: arrayCreate
  : # Sat Aug 1 08:03:27 EDT 2015
  : pass: Test missing array name
  : pass: Create array with no values
  : pass: Create array with one value
  : pass: Create array with two values



** Test variable to see if it is an array
  #+begin_src sh  :results output :exports both
  exec 2>&1;set -e; set -u; set +x; echo '#' `date;`

  source bashArrays.sh

  foo=""
  bar=(baz blort)

  if isArray ; then echo no array is an array; else echo no array is not an array; fi

  if isArray foo; then echo foo is an array; else echo foo is not an array; fi

  if isArray bar; then echo bar is an array; else echo bar is not an array; fi
  #+end_src

  #+RESULTS[62ae659f880fec698cc070a34268151cd9073068]:
  : # Fri Jul 31 20:52:33 EDT 2015
  : no array is not an array
  : foo is not an array
  : bar is an array



** Append to an array
  #+name: arrayAppend
  #+begin_src sh  :results output :exports both
#  exec 2>&1;set -e; set -u; set +x; echo '#' `date;`
    set -u;  set +x; echo '#' `date;`

  source bashArrays.sh
  
  echo 
  echo APPEND TO ARRAY
  echo 

  arrayCreate qux 2>&1 || true
  echo qux is ${qux[@]:-}
  echo
 
  arrayAppend qux one || true
  echo foo is ${foo[@]:-} || true
  echo
  
  arrayAppend quuux two three || true
  echo quuux is ${quuux[@]:-''} || true
  echo

  arrayAppend || true
  echo quuux is ${quuux[@]:-''} || true
  echo
   
  #+end_src

  #+RESULTS[3b226b7885ea7df8a79d2588a334b312e382a80a]: arrayAppend
  #+begin_example
  # Sat Aug 1 05:17:28 EDT 2015

  APPEND TO ARRAY

  qux is

  var qux
  varAT qux
  args one

  foo is

  var quuux
  varAT quuux
  args two three

  quuux is quuux two three

  var ''
  varAT ''
  args

  quuux is quuux two three

#+end_example




 


  #
  # Prepend to an array
  #

  #
  # test if array contains an element
  # http://stackoverflow.com/questions/3685970/check-if-an-array-contains-a-value

  if 

  #
  # Remove element form an array
  #

  #
  # Split to create an array
  #

  #
  # Join array to create string
  #

  #
  # Delete an array
  #

  #
  # Test
  #

  arrayCreate "foo"

  echo Done.
  #+end_src

  #+RESULTS:
  : # Thu Jul 30 05:24:52 EDT 2015
  : foo
  : Done.



 
